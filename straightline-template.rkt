#lang rosette

(require rosette/lib/synthax)

(current-bitwidth 8)

(define (set-subleq regs r1 r2)
  (vector-set! regs r2 (bvsub (vector-ref regs r2) (vector-ref regs r1)))
  )

(define (straightline-template a b c regs)
  (vector-set! regs 1 a)
  (vector-set! regs 2 b)
  (vector-set! regs 3 c)
  ;; (vector-set! regs 4 d)
  (define line1 #t)
  (define line2 #t)
  (define line3 #t)
  (define line4 #f)
  (define line5 #f)
  (define line6 #f)
  (define line7 #f)
  (define line8 #f)
  (define r1_0 (choose 0 1 2 3 4 5 6 7 8 9))
  (define r2_0 (choose 0 5 6 7 8 9))
  (define r1_1 (choose 0 1 2 3 4 5 6 7 8 9))
  (define r2_1 (choose 0 5 6 7 8 9))
  (define r1_2 (choose 0 1 2 3 4 5 6 7 8 9))
  (define r2_2 (choose 0 5 6 7 8 9))
  (define r1_3 (choose 0 1 2 3 4 5 6 7 8 9))
  (define r2_3 (choose 0 5 6 7 8 9))
  (define r1_4 (choose 0 1 2 3 4 5 6 7 8 9))
  (define r2_4 (choose 0 5 6 7 8 9))
  (define r1_5 (choose 0 1 2 3 4 5 6 7 8 9))
  (define r2_5 (choose 0 5 6 7 8 9))
  (define r1_6 (choose 0 1 2 3 4 5 6 7 8 9))
  (define r2_6 (choose 0 5 6 7 8 9))
  (define r1_7 (choose 0 1 2 3 4 5 6 7 8 9))
  (define r2_7 (choose 0 5 6 7 8 9))
  (define r1_8 (choose 0 1 2 3 4 5 6 7 8 9))
  (define r2_8 (choose 0 5 6 7 8 9))
  ;; L0
  (set-subleq regs r1_0 r2_0)
  ;; L1
  (cond [line1 (set-subleq regs r1_1 r2_1)])
  ;; L2
  (cond [line2 (set-subleq regs r1_2 r2_2)])
  ;; L3
  (cond [line3 (set-subleq regs r1_3 r2_3)])
  ;; L4
  (cond [line4 (set-subleq regs r1_4 r2_4)])
  ;; L5
  (cond [line5 (set-subleq regs r1_5 r2_5)])
  ;; L6
  (cond [line6 (set-subleq regs r1_6 r2_6)])
  ;; L7
  (cond [line7 (set-subleq regs r1_7 r2_7)])
  ;; L8
  (cond [line8 (set-subleq regs r1_8 r2_8)])
  (vector-ref regs 0)
  )

(define (simple-add a b regs)
  (bvadd a b)
  )
;; (define line1 #t)
;; (define line2 #t)
;; (define line3 #f)
;; (define line4 #f)
;; (define line5 #f)
;; (define line6 #f)
;; (define line7 #f)
;; (define line8 #f)
;; (define r1_0 2)
;; (define r2_0 3)
;; (define r1_1 1)
;; (define r2_1 3)
;; (define r1_2 3)
;; (define r2_2 0)
;; (define r1_3 (choose 0 1 2 3 4 5 6 7 8 9))
;; (define r2_3 (choose 0 3 4 5 6 7 8 9))
;; (define r1_4 (choose 0 1 2 3 4 5 6 7 8 9))
;; (define r2_4 (choose 0 3 4 5 6 7 8 9))
;; (define r1_5 (choose 0 1 2 3 4 5 6 7 8 9))
;; (define r2_5 (choose 0 3 4 5 6 7 8 9))
;; (define r1_6 (choose 0 1 2 3 4 5 6 7 8 9))
;; (define r2_6 (choose 0 3 4 5 6 7 8 9))
;; (define r1_7 (choose 0 1 2 3 4 5 6 7 8 9))
;; (define r2_7 (choose 0 3 4 5 6 7 8 9))
;; (define r1_8 (choose 0 1 2 3 4 5 6 7 8 9))
;; (define r2_8 (choose 0 3 4 5 6 7 8 9))

(define (simple-neg a b regs)
  (bvneg a)
  )
;; (define line1 #t)
;; (define line2 #f)
;; (define line3 #f)
;; (define line4 #f)
;; (define line5 #t)
;; (define line6 #t)
;; (define line7 #f)
;; (define line8 #t)
;; (define r1_0 1)
;; (define r2_0 9)
;; (define r1_1 2)
;; (define r2_1 4)
;; (define r1_2 2)
;; (define r2_2 4)
;; (define r1_3 1)
;; (define r2_3 4)
;; (define r1_4 4)
;; (define r2_4 4)
;; (define r1_5 1)
;; (define r2_5 7)
;; (define r1_6 1)
;; (define r2_6 4)
;; (define r1_7 1)
;; (define r2_7 7)
;; (define r1_8 1)
;; (define r2_8 0)

(define (simple-not a b regs)
  (bvnot a)
  )
;; (define line1 #t)
;; (define line2 #f)
;; (define line3 #f)
;; (define line4 #f)
;; (define line5 #f)
;; (define line6 #f)
;; (define line7 #f)
;; (define line8 #f)
;; (define r1_0 1)
;; (define r2_0 0)
;; (define r1_1 9)
;; (define r2_1 0)
;; (define r1_2 (choose 0 1 2 3 4 5 6 7 8 9))
;; (define r2_2 (choose 0 3 4 5 6 7 8 9))
;; (define r1_3 (choose 0 1 2 3 4 5 6 7 8 9))
;; (define r2_3 (choose 0 3 4 5 6 7 8 9))
;; (define r1_4 (choose 0 1 2 3 4 5 6 7 8 9))
;; (define r2_4 (choose 0 3 4 5 6 7 8 9))
;; (define r1_5 (choose 0 1 2 3 4 5 6 7 8 9))
;; (define r2_5 (choose 0 3 4 5 6 7 8 9))
;; (define r1_6 (choose 0 1 2 3 4 5 6 7 8 9))
;; (define r2_6 (choose 0 3 4 5 6 7 8 9))
;; (define r1_7 (choose 0 1 2 3 4 5 6 7 8 9))
;; (define r2_7 (choose 0 3 4 5 6 7 8 9))
;; (define r1_8 (choose 0 1 2 3 4 5 6 7 8 9))
;; (define r2_8 (choose 0 3 4 5 6 7 8 9))

(define (simple-xor a b regs)
  (bvxor a b)
  )

(define (three-adds a b c d regs)
  (bvadd (bvadd a b) (bvadd c d))
  )

(define (add-sub-not a b c regs)
  (bvnot (bvsub (bvadd a b) c))
  )

(define (same-add original example a b)
  (define regs (make-vector 10 (bv 0 8)))
  (vector-set! regs 9 (bv 1 8))
  (assert (bveq (original a b regs) (example a b regs)))
  )

(define (same-complex original example a b c)
  (define regs (make-vector 10 (bv 0 8)))
  (vector-set! regs 9 (bv 1 8))
  (assert (bveq (original a b c regs) (example a b c regs)))
  )

;; Synthesis examples
(define-symbolic a (bitvector 8))
(define-symbolic b (bitvector 8))
(define-symbolic c (bitvector 8))
(define-symbolic d (bitvector 8))

(define sol
  (synthesize #:forall (list a b c)
              #:guarantee (same-complex add-sub-not straightline-template a b c)))

(print-forms sol)

